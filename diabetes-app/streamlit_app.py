
"""Project 3 - Diabetes Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oxnhMTlomJ4HVhPuowpPFyMt1mwuOuQo

Importing the Dependencies
"""
import streamlit as st
import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collection and Analysis

PIMA Diabetes Dataset
"""

# loading the diabetes dataset to a pandas DataFrame
# Load the dataset
import pandas as pd
import streamlit as st

# Load the dataset
diabetes_dataset = pd.read_csv("diabetes-app/diabetes.csv")  # Adjust path if needed

# Display the first 5 rows
st.subheader("🔍 First 5 rows of the dataset:")
st.dataframe(diabetes_dataset.head())


# printing the first 5 rows of the dataset
diabetes_dataset.head()

# number of rows and Columns in this dataset
diabetes_dataset.shape

# getting the statistical measures of the data
diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

"""0 --> Non-Diabetic

1 --> Diabetic
"""

diabetes_dataset.groupby('Outcome').mean()

# separating the data and labels
X = diabetes_dataset.drop(columns = 'Outcome', axis=1)
Y = diabetes_dataset['Outcome']

print(X)

print(Y)

"""Data Standardization"""

scaler = StandardScaler()

scaler.fit(X)

standardized_data = scaler.transform(X)

print(standardized_data)

X = standardized_data
Y = diabetes_dataset['Outcome']

print(X)
print(Y)

"""Train Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Training the Model"""

classifier = svm.SVC(kernel='linear')

#training the support vector Machine Classifier
classifier.fit(X_train, Y_train)

"""Model Evaluation

Accuracy Score
"""

# accuracy score on the training data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy score of the training data : ', training_data_accuracy)

# accuracy score on the test data
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy score of the test data : ', test_data_accuracy)

"""Making a Predictive System"""

input_data = (5,166,72,19,175,25.8,0.587,51)

# changing the input_data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# standardize the input data
std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')
    import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Title
st.title("🩺 Diabetes Prediction App")

# Load Data
try:
    diabetes_dataset = pd.read_csv("diabetes-app/diabetes.csv")  # Adjust path if needed
    st.subheader("🔍 First 5 Rows of the Dataset")
    st.dataframe(diabetes_dataset.head())
except Exception as e:
    st.error(f"❌ Error loading data: {e}")

# Data Visualization
st.subheader("📈 Correlation Heatmap")
fig, ax = plt.subplots()
sns.heatmap(diabetes_dataset.corr(), annot=True, cmap="coolwarm", ax=ax)
st.pyplot(fig)

st.subheader("🧮 Outcome Distribution")
st.bar_chart(diabetes_dataset["Outcome"].value_counts())

# Preprocessing
X = diabetes_dataset.drop(columns="Outcome", axis=1)
y = diabetes_dataset["Outcome"]
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Model Training
model = LogisticRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

st.subheader("✅ Model Accuracy")
st.write(f"Accuracy: {accuracy_score(y_test, y_pred):.2f}")

# Sidebar Input for Prediction
st.sidebar.header("🔍 Enter Patient Data")

def user_input():
    glucose = st.sidebar.slider("Glucose", 0, 200, 120)
    bp = st.sidebar.slider("BloodPressure", 0, 122, 70)
    skin = st.sidebar.slider("SkinThickness", 0, 99, 20)
    insulin = st.sidebar.slider("Insulin", 0, 846, 79)
    bmi = st.sidebar.slider("BMI", 0.0, 67.1, 25.0)
    dpf = st.sidebar.slider("DiabetesPedigreeFunction", 0.0, 2.5, 0.5)
    age = st.sidebar.slider("Age", 10, 90, 33)
    preg = st.sidebar.slider("Pregnancies", 0, 20, 2)
    return [preg, glucose, bp, skin, insulin, bmi, dpf, age]

input_data = user_input()
input_array = scaler.transform([input_data])
prediction = model.predict(input_array)[0]

# Prediction Output
st.subheader("🩺 Prediction Result")
if prediction == 1:
    st.error("🚨 Predicted: Diabetic")
else:
    st.success("✅ Predicted: Non-Diabetic")

